pipeline {
    agent {
            /*
        POD: 
            Contenedor: bbdd
            Contenedor: maven+java: aplicación en funcionamiento * COMO CONTENEDOR POR DEFECTO
            Contenedor: jmeter
            Contenedor: postman
            */
    }
    // Backend de una app web... que tendré: SERVICIOS WEB

    // De dónde venimos? Compilar + Pruebas unitarias + Pruebas de calidad de código
    // Aquí qué haremos? 
    //          Pruebas de unitarias:   Componentes AISLADOS* (Ya realizadas)
    //          Pruebas de integración: COMUNICACION entre componentes (Éstas las hacemos ahora)
    //                                          Saber si mi componente que gestiona la BBDD: Repository
    //                                          se comunica bien con la BBDD
    //          Pruebas de sistema:     COMPORTAMIENTO del sistema completo (Parte de ellas también)
    //                                      Las funcionales
    //                                          Saber si cuando un ente externo llama al servicio web... con unos datos
    //                                          éste le devuelve lo que tiene que devolver
    //                                              Necesito: un ente externo:
    //                                                  SoapUI, Postman, ReadyAPI, Karate
    //                                                      script
    //                                      No funcionales
    //                                          Puedo hacer pruebas de rendimiento?
    //                                              Para ver cómo un servicio responde a carga de trabajo? NO
    //                                              Para ver qué tal va el sistema con 1 usuario : LINEA BASE? SI
    //                                                  Necesito: un ente externo que mida rendimiento:
    //                                                      JMeter, Loadrunner
    //                                                          script
    //      Para poder hacerlas?    Maven... java                 Contenedor
    //                              NariaDB *** De donde lo saco? Contenedor

    stages {

        stage('Descarga del código') {
            steps {
                echo 'Lo saco de git... si es que éste pipeline no está en el mismo repo'
                    // Necesito el código de las pruebas.. que no está en el artefacto
                    // proyecto/
                    //          src/
                    //              main/ CODIGO DEL PROYECTO... lo que se empaqueta como artefacto
                    //              test/ CODIGO DE LAS PRUEBAS
                echo 'Debería recuperar el ARTEFACTO (app) que ya ha sido compilada de antemano y a la que se hicieron las pruebas'
                    // En el pipeline que hizo las pruebas unitarias... y la compilación debería haber generado un artefacto
                    // Que es el que despliego y pruebo
            }
        }
        stage('Preparación del entorno') {
            steps {
                container('bbdd'){
                    echo 'Configuración/Creación/Carga de la BBDD'
                }
            }
        }  
        stage('Pruebas de integración') {
            steps {
                // En el caso de maven las ejecutocon $ mvn verify
                echo 'Ejecuto las pruebas de integración'
            }
            post{
                always {// Junit: es un framework de java para pruebas. Muy antiguo.. prácticamente el primero.
                        // Y su formato de informes se ha tomado como estándar.
                    // junit
                    echo 'Capturar informe de pruebas'
                }
            }
        }

        stage('Otras pruebas') {
            parallel {
                stage('Arranco el sistema') {
                    // Necesito tener arrancado un sistema
                    // Spring: Libreria para el desarrollo de apps java
                    steps {
                        echo 'Lanzo podman para ejecutar las pruebas de sistema'
                        sh 'mvn springboot:run'
                    }
                }
                stage('Lanzar las pruebas') {
                    stages {
                        stage('Esperar al sistema') {
                            steps{
                                // Meter un sleep o un sleep más listo que mire cuando ha arrancado el sistema
                            }
                        }
                        stage('Pruebas de sistema') {
                            steps{
                                container('postman') {
                                    echo 'Lanzo postman para ejecutar las pruebas de sistema'
                                }
                            }
                            post{
                                always {
                                    echo 'Capturar informe de pruebas de podman'
                                }
                            }
                        }
                        stage('Pruebas de rendimiento') {
                            steps{
                                container('jmeter') {
                                    echo 'Lanzo jmeter para ejecutar las pruebas de sistema'
                                }
                            }
                            post{
                                always {
                                    echo 'Capturar informe de pruebas de jmeter'
                                }
                            }
                        }
                    }
                    post{
                        always{
                            echo 'Paro el sistema'
                        }
                    }
                }
            }
        }

        // ^^^^ Un pipeline de Integración CONTINUA

        // vvvv Un pipeline de Entrega Continua
        // Cierto es que todo lo anterior tiene que haber ido bien... para plantearme hacer esto.
        //      Es condicion necesaria
        //      Pero no suficiente. Puede ser que todo haya ido bien.. pero que el producto todavía no este listo...
        //      Haya más cosas que desarrollar... 
        // Quién dice que el producto está listo?
        //      A priori el desarrollador / producto owner
        //          A quién se lo dice? A git!
                    // Tendré una rama desarrollo -> release 
                    // Tengo a un Jenkins leyendo de la rama release... a ver si hay cambios
                    // Y cuando se entere que hay un nuevo commit, arrancará el pipeline de Entrega Continua
        // Este es el momento de guardar el Artefacto en un Repositorio de Artefactos: Nexus, Artifactory, JFrog
    }



}
